import { getAsObject } from "@base-cms/object-path";
import hierarchyAliases from "@base-cms/marko-web/utils/hierarchy-aliases";
import queryFragment from "../../graphql/fragments/content-list";
import valorQueryFragment from "../../graphql/fragments/content-list-body";
import GAM from "../../../config/gam";

$ const { id, alias, name, pageNode } = data;

<marko-web-website-section-page-layout id=id alias=alias name=name>
  <@head>
    <marko-web-gtm-website-section-context|{ context }| alias=alias>
      <marko-web-gtm-push data=context />
    </marko-web-gtm-website-section-context>
    <marko-web-resolve-page|{ data: section }| node=pageNode>
      $ const aliases = hierarchyAliases(section);
      $ const adSlots = {
          "gpt-ad-lb1":   GAM.getAdUnit({ name: "lb1", aliases }),
        }
       <marko-web-gam-slots slots=adSlots />
    </marko-web-resolve-page>
  </@head>
  <@above-container>
    <marko-web-resolve-page|{ data: section }| node=pageNode>
      $ const aliases = hierarchyAliases(section);
      <marko-web-gam-out-of-page-ad ...GAM.getAdUnit({ name: "wa", aliases }) />
      <marko-web-gam-out-of-page-ad ...GAM.getAdUnit({ name: "reskin", aliases }) />
    </marko-web-resolve-page>
  </@above-container>
  <@page>
    <marko-web-gam-display-ad id="gpt-ad-lb1" modifiers=["top-of-page"] />

    <marko-web-resolve-page|{ data: section }| node=pageNode>
    $ const aliases = hierarchyAliases(section);
      <marko-web-page-wrapper class="mb-block">
        <@section>
          <div class="row">
            <div class="col">
              <default-theme-website-section-breadcrumbs section=section display-self=false />
              <marko-web-website-section-name tag="h1" class="page-wrapper__title" obj=section />
              <if(section.description)>
                <p class="page-wrapper__deck">${section.description}</p>
              </if>
              <hr>
            </div>
          </div>
        </@section>

        <@section>
          <div class="row">
            <div class="col-lg-6">
              <marko-web-query|{ nodes }|
                name="website-optioned-content"
                params={ sectionId: id, optionName: "Pinned", limit: 1, includeContentTypes: ["Article"], queryFragment: valorQueryFragment }
              >
                $ const content = nodes[0];
                $ const primaryImage = getAsObject(content, "primaryImage");
                <h1>${content.name}</h1>
                <marko-web-node
                  type=`${content.type}-content`
                  image-position="top"
                  card=true
                >
                  <@image
                    src=primaryImage.src
                    alt=primaryImage.alt
                    is-logo=primaryImage.isLogo
                    fluid=true
                    ar="16:9"
                    width=600
                    link={ href: content.canonicalPath }
                  />
                  <@body>
                    <@text>
                      <marko-web-content-body tag=null obj=content />
                    </@text>
                  </@body>
                </marko-web-node>
              </marko-web-query>
            </div>

            <div class="col-lg-6">
              <marko-web-query|{ nodes }|
                name="website-optioned-content"
                params={ sectionId: id, optionName: "Pinned", limit: 100, includeContentTypes: ["Promotion"], queryFragment }
              >
                <div class="row">
                  <for|node| of=nodes>
                    <div class="col-4">
                      $ const primaryImage = getAsObject(node, "primaryImage");
                      <marko-web-node
                        type="company-content"
                        image-position="top"
                        card=true
                      >
                        <@image
                          src=primaryImage.src
                          alt=primaryImage.alt
                          is-logo=true
                          fluid=true
                          ar="1:1"
                          width=200
                          link={ href: node.canonicalPath }
                        />
                      </marko-web-node>
                    </div>
                  </for>
                </div>
              </marko-web-query>
            </div>

          </div>
        </@section>
        <@section>
          <div class="row">
            <div class="col-lg-12 mb-block">
              <marko-web-query|{ nodes }|
                name="website-scheduled-content"
                params={ sectionId: id, limit: 10, skip: 0, queryFragment }
              >
                <website-content-card-deck-flow nodes=nodes aliases=aliases>
                  <@native-x index=2 name="default" aliases=[alias] />
                </website-content-card-deck-flow>
              </marko-web-query>
            </div>
          </div>

          <div class="row">
            <div class="col-lg-4 page-rail">
              <marko-web-gam-define-display-ad ...GAM.getAdUnit({ name: "load-more", size: [300, 600], aliases }) modifiers=["in-card"] />
            </div>
            <div class="col-lg-8 mb-block">
              <marko-web-query|{ nodes }|
                name="website-scheduled-content"
                params={ sectionId: id, limit: 4, skip: 10, queryFragment }
              >
                <website-content-list-flow nodes=nodes>
                  <@native-x index=2 name="default" aliases=[alias] />
                </website-content-list-flow>
              </marko-web-query>
            </div>
          </div>
        </@section>
      </marko-web-page-wrapper>
    </marko-web-resolve-page>
  </@page>
  <@below-page>
    <marko-web-resolve-page|{ data: section }| node=pageNode>
      $ const aliases = hierarchyAliases(section);
      <marko-web-load-more
        component-name="content-load-more-flow"
        component-input={
          aliases,
          nativeX: { index: 0, name: "default", aliases },
        }
        fragment-name="content-list"
        query-name="website-scheduled-content"
        query-params={ sectionId: id, limit: 14, skip: 14 }
        page-input={ for: "website-section", id }
      />
    </marko-web-resolve-page>
  </@below-page>
  <@foot>
    <marko-web-resolve-page|{ data: section }| node=pageNode>
      $ const aliases = hierarchyAliases(section);
      <marko-web-gam-fixed-ad-bottom ...GAM.getAdUnit({ name: "lb2", aliases }) refresh-interval=15 scroll-offset=100 />
    </marko-web-resolve-page>
  </@foot>
</marko-web-website-section-page-layout>
